name: Build

on:
  workflow_dispatch:
    inputs:
      library:
        description: Name of the library to build
        required: true
      registry:
        description: NPM Registry
        required: true
      registry_secret:
        description: NPM Registry secret
        required: true  
      package_name:
        description: NPM Package name
        required: true
      package_version:
        description: NPM Package version
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - run: # ${{ inputs.library }}

      - name: Checkout Repository
        uses: actions/checkout@v4

      # Setup the requirement for npm package
      - name: Set up Node.js
        uses: actions/setup-node@v4.0.1
        with:
          node-version: 20
          registry-url: ${{ inputs.registry }}
          # scope: ${{ steps.package-meta.outputs.scope }}

      # Install requirement and build the package.
      - name: Build the package
        run: yarn install
      - run: npx ng build ${{ inputs.library }}

      - name: Get the previous package id for the same package version
        if: ${{ !(startsWith(github.ref, 'refs/tags/v')) }}
        id: version-id
        env:
          PACKAGE_NAME: ${{ inputs.package_name }}
          PACKAGE_VERSION: ${{ inputs.package_version }}
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const response = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                org: context.repo.owner,
                package_name: process.env.PACKAGE_NAME,
                package_type: 'npm'
              });
              const version = response.data.find(v => v.name === process.env.PACKAGE_VERSION);
              if (version && version.id) {
                return version.id;
              } else {
                console.error('Version not found');
                return 0;
              }
            } catch (error) {
              if (error.status === 404) {
                console.error('Package not found or access denied');
                return 0;
              } else {
                throw error; // re-throw the error if it's not a 404
              }
            }

      # Remove previous push of that version
      - name: Delete package
        if: ${{ !(startsWith(github.ref, 'refs/tags/v')) && steps.version-id.outputs.result != '0' }}
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ inputs.package_name }}
          package-type: 'npm'
          package-version-ids: ${{ steps.version-id.outputs.result }}

      # Publish the package.
      # If it's from a git tag, the package is published to npmjs.com and 
      # the subversion name set as tag.
      # If it's from a PR, the package is published to github and no tag is set.
      # If none above, the package is published to github and the latest tag is set.
      - name: Publish the package
        run: |
          # If git tag
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            TAG=$(echo '${{ github.ref }}' | sed -n 's/.*-\(.*\)\..*/\1/')
            if [[ -z "$TAG" ]]; then
              TAG='latest'
            fi
            npm publish ./dist/${{ inputs.library }} --access public --tag $TAG

          # If Pull Request
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            npm publish ./dist/${{ inputs.library }} --access public --no-tag --verbose
          
          # If a push
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "main" ]]; then
            npm publish ./dist/${{ inputs.library }} --access public --tag latest

          # Whatever else
          else
            npm publish ./dist/${{ inputs.library }} --access public --tag $(basename "${{ github.ref }}")
          fi

        env:
          NODE_AUTH_TOKEN: ${{ inputs.registry_secret }}
