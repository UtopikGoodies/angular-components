name: Projects

on:
  push:
    tags: ["v*.*.*"]
    branches: ["main"]
  pull_request:
    branches: ["main"]
    paths:
      - "projects/**"

jobs:
  projects:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate package meta
        id: package-meta
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "registry=https://registry.npmjs.org" >> $GITHUB_OUTPUT
            echo "secret=${{ secrets.NPM_TOKEN }}" >> $GITHUB_OUTPUT
            echo "version=$(echo '${{ github.ref }}' | sed 's|refs/tags/v||')" >> $GITHUB_OUTPUT
          else
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              VERSION_SUFFIX="-pr.${{ github.event.pull_request.number }}"
            else
              VERSION_SUFFIX=-$(basename "${{ github.ref }}")
            fi
            echo "registry=https://npm.pkg.github.com" >> $GITHUB_OUTPUT
            echo "secret=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
            echo "version=0.0.0$VERSION_SUFFIX" >> $GITHUB_OUTPUT
          fi

      - name: Projects
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.WORKFLOW_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const workflow_id = 'build.yml';

            let ref;
            if (context.eventName === 'pull_request') {
              const pullRequestNumber = context.payload.pull_request.number;
              const response = await github.rest.pulls.get({
                owner,
                repo,
                pull_number: pullRequestNumber,
              });
              ref = response.data.head.ref;
            } else {
              ref = context.ref.startsWith('refs/tags/') ? context.ref.replace('refs/tags/', '') : context.ref;
            }

            const projects = require('./angular.json').projects;
            const libraries = Object.keys(projects).filter(name => projects[name].projectType === 'library').join(' ');

            console.log(${{ steps.package-meta.outputs.registry }});
            console.log(${{ steps.package-meta.outputs.secret  }});
            console.log(${{ steps.package-meta.outputs.version }});

            // for (const library of libraries.split(' ')) {
            //   console.log(`Trigger build for ${library}`);
            //   await github.rest.actions.createWorkflowDispatch({
            //     owner,
            //     repo,
            //     workflow_id,
            //     ref,
            //     inputs: {
            //       library: library,
            //       registry: ${{ steps.package-meta.outputs.registry }},
            //       registry_secret: ${{ steps.package-meta.outputs.secret }},
            //       package_name: `${owner}/${library}`,
            //       package_version: ${{ steps.package-meta.outputs.version }}
            //     },
            //   });
            // }
